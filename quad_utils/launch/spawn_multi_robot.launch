<launch>
    <arg name="world"   default="flat"/>
    <arg name="controller"      default="inverse_dynamics"/>
    <arg name="init_pose"/>
    <arg name="robot_namespace" default="robot1"/>
    <!-- Generate the tf_prefix from the namespace -->
    <arg name="tfpre" default="$(arg robot_namespace)_tf" />
    <!-- Put value on the parameter server in the group's namespace -->
    <param name="tf_prefix" value="$(arg robot_namespace)_tf" />

  <param name="robot_description_sdf" textfile="$(find spirit_description)/sdf_mesh/spirit.sdf" />

  <!-- Spawn SDF model -->
  <node name="spawn_sdf_model" pkg="gazebo_ros" type="spawn_model" args="-sdf -param robot_description_sdf -model spirit_$(arg robot_namespace) -x 0.0 -y 0.0 -z 0.5" output="screen"/>

  <include file="$(find quad_utils)/launch/load_params.launch" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" 
          name="robot_state_publisher" output="screen"/> 
    
    <!-- Load the contact state publisher -->
    <!-- <node name="contact_state_publisher" pkg="gazebo_scripts" type="contact_state_publisher_node" output="screen"/> -->

    <include file="$(find quad_utils)/launch/robot_driver.launch">
      <arg name="controller" value="$(arg controller)"/>
      <arg name="mocap" value="false"/>
      <arg name="is_hw" value="false"/>
    </include>

    <rosparam file="$(find gazebo_scripts)/config/spirit_control.yaml" command="load"/>
    <rosparam param="joint_state_controller/base_frame_id" subst_value="True">$(arg tfpre)/base_link</rosparam>
    <node name="controller_spawner"
        pkg="controller_manager"
        type="spawner"
        respawn="false"
        output="screen"
        args="joint_controller joint_state_controller">
    </node>  
    
</launch>